# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import user_sport_pb2 as user__sport__pb2


class SportLiveStub(object):
    """Файл который описывает структруру классов, которые потом можно будет встраивать в сам код программы
    Также он описывает и часть их методов(конструкторы и тд)

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSport = channel.unary_unary(
                '/SportLive/GetSport',
                request_serializer=user__sport__pb2.UserName.SerializeToString,
                response_deserializer=user__sport__pb2.Sports.FromString,
                )
        self.AllSports = channel.unary_unary(
                '/SportLive/AllSports',
                request_serializer=user__sport__pb2.MaxRequest.SerializeToString,
                response_deserializer=user__sport__pb2.AllSport.FromString,
                )


class SportLiveServicer(object):
    """Файл который описывает структруру классов, которые потом можно будет встраивать в сам код программы
    Также он описывает и часть их методов(конструкторы и тд)

    """

    def GetSport(self, request, context):
        """Здесь описываешь какие функции у тебя должны быть на сервере)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllSports(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SportLiveServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSport,
                    request_deserializer=user__sport__pb2.UserName.FromString,
                    response_serializer=user__sport__pb2.Sports.SerializeToString,
            ),
            'AllSports': grpc.unary_unary_rpc_method_handler(
                    servicer.AllSports,
                    request_deserializer=user__sport__pb2.MaxRequest.FromString,
                    response_serializer=user__sport__pb2.AllSport.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SportLive', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SportLive(object):
    """Файл который описывает структруру классов, которые потом можно будет встраивать в сам код программы
    Также он описывает и часть их методов(конструкторы и тд)

    """

    @staticmethod
    def GetSport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SportLive/GetSport',
            user__sport__pb2.UserName.SerializeToString,
            user__sport__pb2.Sports.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllSports(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SportLive/AllSports',
            user__sport__pb2.MaxRequest.SerializeToString,
            user__sport__pb2.AllSport.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
